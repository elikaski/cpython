"""Token constants."""
# Auto-generated by Tools/build/generate_token.py

__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']

ENDMARKER = 0
NAME = 1
NUMBER = 2
STRING = 3
NEWLINE = 4
INDENT = 5
DEDENT = 6
LPAR = 7
RPAR = 8
LSQB = 9
RSQB = 10
COLON = 11
COMMA = 12
SEMI = 13
PLUS = 14
PLUSPLUS = 15
MINUSMINUS = 16
SHLSHL = 17
SHRSHR = 18
XORXOR = 19
ANDAND = 20
OROR = 21
MULMUL = 22
DIVDIV = 23
MODMOD = 24
MINUS = 25
STAR = 26
SLASH = 27
VBAR = 28
AMPER = 29
LESS = 30
GREATER = 31
EQUAL = 32
DOT = 33
PERCENT = 34
LBRACE = 35
RBRACE = 36
EQEQUAL = 37
NOTEQUAL = 38
LESSEQUAL = 39
GREATEREQUAL = 40
TILDE = 41
CIRCUMFLEX = 42
LEFTSHIFT = 43
RIGHTSHIFT = 44
DOUBLESTAR = 45
PLUSEQUAL = 46
MINEQUAL = 47
STAREQUAL = 48
SLASHEQUAL = 49
PERCENTEQUAL = 50
AMPEREQUAL = 51
VBAREQUAL = 52
CIRCUMFLEXEQUAL = 53
LEFTSHIFTEQUAL = 54
RIGHTSHIFTEQUAL = 55
DOUBLESTAREQUAL = 56
DOUBLESLASH = 57
DOUBLESLASHEQUAL = 58
AT = 59
ATEQUAL = 60
RARROW = 61
ELLIPSIS = 62
COLONEQUAL = 63
EXCLAMATION = 64
OP = 65
TYPE_IGNORE = 66
TYPE_COMMENT = 67
SOFT_KEYWORD = 68
FSTRING_START = 69
FSTRING_MIDDLE = 70
FSTRING_END = 71
COMMENT = 72
NL = 73
# These aren't used by the C tokenizer but are needed for tokenize.py
ERRORTOKEN = 74
ENCODING = 75
N_TOKENS = 76
# Special definitions for cooperation with parser
NT_OFFSET = 256

tok_name = {value: name
            for name, value in globals().items()
            if isinstance(value, int) and not name.startswith('_')}
__all__.extend(tok_name.values())

EXACT_TOKEN_TYPES = {
    '!': EXCLAMATION,
    '!=': NOTEQUAL,
    '%': PERCENT,
    '%%': MODMOD,
    '%=': PERCENTEQUAL,
    '&': AMPER,
    '&&': ANDAND,
    '&=': AMPEREQUAL,
    '(': LPAR,
    ')': RPAR,
    '*': STAR,
    '**': DOUBLESTAR,
    '***': MULMUL,
    '**=': DOUBLESTAREQUAL,
    '*=': STAREQUAL,
    '+': PLUS,
    '++': PLUSPLUS,
    '+=': PLUSEQUAL,
    ',': COMMA,
    '-': MINUS,
    '--': MINUSMINUS,
    '-=': MINEQUAL,
    '->': RARROW,
    '.': DOT,
    '...': ELLIPSIS,
    '/': SLASH,
    '//': DOUBLESLASH,
    '///': DIVDIV,
    '//=': DOUBLESLASHEQUAL,
    '/=': SLASHEQUAL,
    ':': COLON,
    ':=': COLONEQUAL,
    ';': SEMI,
    '<': LESS,
    '<<': LEFTSHIFT,
    '<<<': SHLSHL,
    '<<=': LEFTSHIFTEQUAL,
    '<=': LESSEQUAL,
    '=': EQUAL,
    '==': EQEQUAL,
    '>': GREATER,
    '>=': GREATEREQUAL,
    '>>': RIGHTSHIFT,
    '>>=': RIGHTSHIFTEQUAL,
    '>>>': SHRSHR,
    '@': AT,
    '@=': ATEQUAL,
    '[': LSQB,
    ']': RSQB,
    '^': CIRCUMFLEX,
    '^=': CIRCUMFLEXEQUAL,
    '^^': XORXOR,
    '{': LBRACE,
    '|': VBAR,
    '|=': VBAREQUAL,
    '||': OROR,
    '}': RBRACE,
    '~': TILDE,
}

def ISTERMINAL(x):
    return x < NT_OFFSET

def ISNONTERMINAL(x):
    return x >= NT_OFFSET

def ISEOF(x):
    return x == ENDMARKER
